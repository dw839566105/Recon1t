import sys
sys.path.append('./PE_calib')
import pub
import numpy as np

import tables, h5py
import argparse
from argparse import RawTextHelpFormatter
import argparse, textwrap
import time

np.set_printoptions(formatter={'float': '{: 0.3f}'.format})
# global:
PMTPos = np.array(((0,0,1),))

PMTNo = np.size(PMTPos[:,0])
L, K = 500, 500
ddx = np.linspace(-1.0, 1.0, K)*0.65
ddy = np.linspace(-1.0, 1.0, L)*0.65
xv, yv = np.meshgrid(ddx, ddy)

VertexTruth = np.vstack((xv.flatten(), np.zeros_like(xv.flatten()), yv.flatten())).T

PMTPosRep = np.tile(PMTPos, (VertexTruth[:,0].shape[0],1))
vertex = np.repeat(VertexTruth, PMTNo, axis=0)

order = 5
from zernike import RZern
cos_theta = pub.LegendreCoeff(PMTPosRep, vertex, order, Legendre=False)
cart = RZern(order)
nk = cart.nk
m = cart.mtab
n = cart.ntab
rho = np.linalg.norm(vertex, axis=1)
theta = np.arccos(cos_theta)        
X = np.zeros((rho.shape[0], nk))
for i in np.arange(nk):
    if not i % 5:
        print(f'process {i}-th event')
    X[:,i] = cart.Zk(i, rho, theta)
X = X[:,m>=0]
print(f'rank: {np.linalg.matrix_rank(X)}')
print(X.shape)

bins=np.arange(-1,1,0.001)
EventID = 500*500
N = 10
# Legendre coeff
x = pub.legval(bins, np.eye(N).reshape(N, N, 1))
# 1st basis
Y = np.tile(x, 500*500).T
# 2nd basis
X = np.repeat(X, bins.shape[0], axis=0)
print(X.shape, Y.shape)
basis = np.zeros((X.shape[0], X.shape[1]*Y.shape[1]))
for i_index, i in enumerate(np.arange(X.shape[1])):
    for j_index, j in enumerate(np.arange(Y.shape[1])):
        total_index = i_index*Y.shape[1] + j_index
        if not total_index % 10:
            print(total_index)
        basis[:, total_index] = X[:,i_index]*Y[:,j_index]
X = basis

h = tables.open_file('test2.h5')
coef_ = h.root.coeff5[:]

A = np.dot(coef_, np.atleast_2d(X).T)
A_test = np.sum(np.exp(A).reshape(-1,1000), axis=1)
print(A_test.shape)

import matplotlib.pyplot as plt
A_test[np.linalg.norm(VertexTruth, axis=1)>0.65] = np.nan
plt.imshow((np.log(A_test)).reshape(500,500), origin='lower', extent=(-1,1,-1,1))
plt.colorbar()

plt.plot(np.exp(A).reshape(-1,1000)[250])
plt.plot(np.exp(A).reshape(-1,1000)[125000])
plt.plot(np.exp(A).reshape(-1,1000)[249750])

plt.plot(np.exp(A).reshape(-1,1000)[250][0:500])

t = np.arange(0,1,0.001)

A_new = np.exp(A).reshape(-1,1000)
A_time = np.zeros(500*500)
for i in np.arange(500*500):
    tmp = np.cumsum(A_new[i])/np.sum(A_new[i])
    A_time[i] = (t[np.where(np.abs(tmp - 0.1) == np.min(np.abs(tmp - 0.1)))[0]])

A_time

A_time[np.linalg.norm(VertexTruth, axis=1)>0.65] = np.nan
A_time1 = A_time  * 376
plt.imshow(A_time1.reshape(500,500), origin='lower', extent=(-1,1,-1,1))
plt.colorbar()

import matplotlib.pyplot as plt
plt.imshow(np.exp(A_sum).reshape(500,500))
plt.colorbar()

plt.plot(A)

A1 = A.reshape(250000,-1)

plt.plot(A1[125000])

A1[125000].reshape(10,-1)

np.pi*0.645**3*4/3*0.

100**(1/3)*0.645

4*np.pi*3**2/(np.pi*0.25**2)

1.3/2.0/1e8*1e9


